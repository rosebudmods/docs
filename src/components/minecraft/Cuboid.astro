---
import type { Cuboid, CuboidTextures } from '@ts/minecraft';

interface Props {
    cuboid: Cuboid;
}

const { cuboid } = Astro.props;
const { textures, w, h, d } = cuboid;

const assets = import.meta.glob<{ default: ImageMetadata }>(
    '/src/assets/mc-assets/assets/minecraft/textures/block/*.png',
);
const src = async (path?: string) =>
    path ? (await assets[path]!()).default.src : undefined;
const tex = async (
    texture?: CuboidTextures,
): Promise<[string, string] | undefined> =>
    texture
        ? [
              `url(${await src(texture.path)}) ` +
                  `${(texture.uv.u * 100) / (16 - texture.uv.w) || 0}% ` +
                  `${(texture.uv.v * 100) / (16 - texture.uv.h) || 0}%/` +
                  `${1600 / texture.uv.w}% ${1600 / texture.uv.h}%`,
              (texture.uv.flipHoriz ? 'scaleX(-1) translateX(-1em) ' : '') +
                  (texture.uv.flipVerti ? 'scaleY(-1) translateY(-1em) ' : ''),
          ]
        : undefined;

const rot = (deg?: number) =>
    deg === 90
        ? 'rotate(90deg) translateZ(-1em)'
        : deg === 180
          ? 'rotate(180deg) translate(-1em, -1em)'
          : deg === 270
            ? 'rotate(270deg) translateX(-1em)'
            : 'scale(1)'; // no-op

const x = cuboid.x / 16;
const y = cuboid.y / 16;
const z = cuboid.z / 16;
const xScale = w / 16;
const yScale = h / 16;
const zScale = d / 16;

// DO NOT TOUCH! (unless you want a headache)
let xTransform = `var(--transform) scaleX(${zScale}) scaleY(${yScale})
translate3d(
    ${z / zScale}em,
    ${-1 - y / yScale}em,
    ${-x}em
) ${rot(textures.front?.rotation)}`;
let yTransform = `var(--transform) scaleX(${zScale}) scaleZ(${xScale})
translate3d(
    ${1 + z / zScale}em,
    ${-yScale - y}em,
    ${-1 - x / xScale}em
) rotateX(90deg) rotateZ(90deg) ${rot(textures.top?.rotation)}`;
let zTransform = `var(--transform) scaleZ(${xScale}) scaleY(${yScale})
translate3d(
    ${zScale + z}em,
    ${-1 - y / yScale}em,
    ${-x / xScale}em
) rotateY(90deg) ${rot(textures.side?.rotation)}`;

const topTexture = await tex(textures.top);
if (topTexture) yTransform += topTexture[1];
const fntTexture = await tex(textures.front);
if (fntTexture) xTransform += fntTexture[1];
const sdeTexture = await tex(textures.side);
if (sdeTexture) zTransform += sdeTexture[1];
---

<span class="cuboid">
    {textures.top && <span class="face y" />}
    {textures.front && <span class="face x" />}
    {textures.side && <span class="face z" />}
</span>

<style
    lang="scss"
    define:vars={{
        xTransform,
        yTransform,
        zTransform,
        topTexture: topTexture?.[0],
        fntTexture: fntTexture?.[0],
        sdeTexture: sdeTexture?.[0],
    }}
>
    .cuboid {
        display: inline-block;
        position: absolute;
        width: calc(cos(45deg) * 2em);
        height: 1em;
    }

    .face {
        position: absolute;
        width: 1em;
        height: 1em;
        top: calc(cos(30deg) * 1em);
        margin: 0 !important;
        image-rendering: pixelated;
        backface-visibility: hidden;

        --transform: rotateX(-30deg) rotateY(-45deg);
        transform-origin: 0 0;

        &.x {
            background: var(--fntTexture);
            filter: brightness(0.6);

            transform: var(--xTransform);
        }

        &.y {
            background: var(--topTexture);

            transform: var(--yTransform);
        }

        &.z {
            background: var(--sdeTexture);
            filter: brightness(0.4);

            transform: var(--zTransform);
        }
    }
</style>
