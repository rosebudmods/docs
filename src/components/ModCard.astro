---
import type { Project } from '@ts/modrinth';
import { formatNumber, formatProjectSides } from '@ts/util';

interface Props {
    mod: Project;
    extended?: boolean;
}

const { mod, extended = false } = Astro.props;
const banner = mod.gallery?.filter((g) => g.featured)[0];
const color = '#' + (mod.color ?? 0).toString(16).padStart(6, '0');
---

<article class:list={['card', !extended && 'link']}>
    {
        banner ? (
            <img class="banner" src={banner.url} aria-hidden="true" />
        ) : (
            <div class="banner" style={`background-color: ${color}`} />
        )
    }
    <p class="title">
        <img class="icon" src={mod.icon_url} alt={`Icon for ${mod.name}`} />
        <span><span>{mod.name}</span><span>a rosebud mod</span></span>
        {!extended && <a class="filling" href={`/${mod.slug}/`} />}
    </p>
    <div class="body">{mod.summary}</div>
    {
        extended && (
            <div class="info">
                <div>
                    <span>
                        <b>{formatProjectSides(mod)}</b>
                    </span>
                    <span>
                        releases for <b>{mod.game_versions[0]}</b> to
                        <b>{mod.game_versions.at(-1)}</b>
                    </span>
                    <span>
                        <a href={mod.link_urls.source?.url}>sources</a> &bull;
                        <a href={mod.link_urls.issues?.url}>issues</a>
                    </span>
                </div>
                <div class="stats">
                    <span>{formatNumber(mod.downloads)}</span> downloads
                </div>
            </div>
        )
    }
</article>

<style lang="scss">
    .card {
        --sl-card-border: var(--sl-color-purple);
        --sl-card-bg: var(--sl-color-purple-low);

        display: flex;
        flex-direction: column;
        position: relative;
        gap: 0.5rem;

        background-color: var(--sl-color-black);
        border: 1px solid var(--sl-color-gray-5);
        border-radius: 1rem;

        transition: transform 0.25s;

        .filling::before {
            content: '';
            position: absolute;
            inset: 0;
        }

        &.link:hover {
            transform: scale(102.5%);
        }

        .banner {
            width: 100%;
            height: 10rem;
            object-fit: cover;

            border-radius: 1em 1em 0 0;
        }

        .icon {
            outline: 4px solid var(--sl-color-black);
            border-radius: 1rem;

            width: 6rem;
            margin-top: -3rem;
        }

        .title {
            display: flex;
            margin: 0;
            padding: 0 2rem;
            gap: 0.75em;
            align-items: center;

            > span {
                display: flex;
                flex-direction: column;

                > :first-child {
                    font-weight: 600;
                    font-size: var(--sl-text-h3);
                    color: var(--sl-color-white);
                    line-height: var(--sl-line-height-headings);
                }
            }
        }

        .body,
        .info {
            margin-top: 0;
            padding: 0 2rem;
            font-size: clamp(
                var(--sl-text-sm),
                calc(0.5rem + 1vw),
                var(--sl-text-body)
            );
        }

        .info {
            display: flex;
            justify-content: space-between;

            > div {
                display: flex;
                flex-direction: column;
            }

            > .stats {
                text-align: right;

                span {
                    font-size: 3em;
                    line-height: 1;
                }
            }
        }

        > :last-child {
            margin-bottom: 1.5em;
        }
    }
</style>
